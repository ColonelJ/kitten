// Applies a function to the stack.
define apply<r..., s...> (r... (r... -> s...) -> s...):
  __apply

// Applies a function to the left branch of a choice.
define choice()()<r..., a, b> (r... (a | b) (r... a -> r...) -> r...):
  __choice

// Same as 'choice__' but taking the discriminant from the stack.
define choice()<r..., a, b> (r... (a | b) (r... a -> r...) -> r...):
  __choice

// Applies one of two functions to the branches of a choice.
define choice()()else()<r..., s..., a, b>
  (r... (a | b) (r... a -> s...) (r... b -> s...) -> s...):
  __choice_else

// Same as 'choice()()else()' but taking the discriminant from the stack.
define choice()else()<r..., s..., a, b>
  (r... (a | b) (r... a -> s...) (r... b -> s...) -> s...):
  __choice_else

// Applies a function if a condition is met.
define if()()<r...> (r... bool (r... -> r...) -> r...):
  __if

// Same as 'if()()' but taking the discriminant from the stack.
define if()<r...> (r... bool (r... -> r...) -> r...):
  __if

// Applies one of two functions according to a condition.
define if()()else()<r..., s...> (r... bool (r... -> s...) (r... -> s...) -> s...):
  __if_else

// Same as 'if()()else()' but taking the discriminant from the stack.
define if()else()<r..., s...> (r... bool (r... -> s...) (r... -> s...) -> s...):
  __if_else

// Applies a function to the value of some option.
define option()()<r..., a> (r... a? (r... a -> r...) -> r...):
  __option

// Same as 'option()()' but taking the discriminant from the stack.
define option()<r..., a> (r... a? (r... a -> r...) -> r...):
  __option

// Applies a function to the value of some option, or else a
// default function.
define option()()else()<r..., s..., a>
  (r... a? (r... a -> s...) (r... -> s...) -> s...):
  __option_else

// Same as 'option()()else()' but taking the discriminant from the stack.
define option()else()<r..., s..., a>
  (r... a? (r... a -> s...) (r... -> s...) -> s...):
  __option_else

// 'cond' accepts a value, a vector of patterns, and a
// default function. A pattern consists of a matching
// function and a body. Each matching function is attempted
// in turn; the body corresponding to the first match to
// return 'some' value is evaluated. If all of the matches
// returned 'none', then 'cond' evaluates the default.
define cond<a, b, c> (
  a                       // Matched value
  [(a -> b?) & (b -> c)]  // (pattern, function) pairs
  (-> c)                  // default function
  ->
  c
):
  -> x ps z;
  option (ps head) -> p:
    x p first apply -> m;
    option (m):
      p rest apply
    else:
      x (ps tail) z cond
  else:
    z apply

// 'cond' without a default.
define cond1<a, b, c> (
  a
  [(a -> b?) & (b -> c)]
  ->
  c
):
  -> x ps;
  ps head fromSome -> p;
  x p first apply -> m;
  option (m):
    p rest apply
  else:
    x (ps tail) cond1

// TODO(strager): Make this more efficient.
define upto()() (int (int ->) ->):
  -> size f;
  { f apply none } size generateN drop

// Repeats an action until a condition is false.
define loopWhile ((-> bool) ->):
  -> f;
  if (f apply): f loopWhile

// Iterates a function on a value until a predicate holds.
define until<a> (a (a -> a) (a -> bool) -> a):
  -> x f p;
  if (x p apply):
    x
  else:
    x f apply
    f p until
