// Absolute value of an integer.
def absInt (Int -> Int):
  -> x;
  \if x < 0:
    x negInt
  else:
    x

// Absolute value of a floating-point number.
def absFloat (Float -> Float):
  -> x;
  \if x <. 0.0:
    x negFloat
  else:
    x

// Whether all elements of a vector satisfy a predicate.
def all ([a] (a -> Bool) -> Bool):
  map and

// Whether all elements of a vector are true.
def and ([Bool] -> Bool):
  true {(&&)} foldl

// Whether any element of a vector satisfies a predicate.
def any ([a] (a -> Bool) -> Bool):
  map or

// Whether a floating-point number is even.
def evenFloat (Float -> Bool):
  -> x; x %. 2.0 =. 0.0

// Whether an integer is even.
def evenInt (Int -> Bool):
  -> x; x % 2 = 0

// The maximum of two integers.
def maxInt (Int Int -> Int):
  -> a b;
  \if a > b: a else: b

// The maximum of three integers.
def maxInt3 (Int Int Int -> Int):
  maxInt maxInt

// The maximum of a vector of integers.
def maxInts ([Int] -> Int?):
  {maxInt} foldl1

// The minimum of two integers.
def minInt (Int Int -> Int):
  -> a b;
  \if a < b: a else: b

// The minimum of three integers.
def minInt3 (Int Int Int -> Int):
  minInt minInt

// The minimum of a vector of integers.
def minInts ([Int] -> Int?):
  {minInt} foldl1

// Floating-point negation.
def negFloat (Float -> Float):
  __neg_float

// Integer negation.
def negInt (Int -> Int):
  __neg_int

// Logical NOT.
def not (Bool -> Bool):
  __not_bool

// Operator alias for 'not'.
prefix !
def ! (Bool -> Bool):
  not

prefix ¬
def ¬ (Bool -> Bool):
  not

// Whether a floating-point number is odd.
def oddFloat (Float -> Bool):
  evenFloat not

// Whether an integer is odd.
def oddInt (Int -> Bool):
  evenInt not

// Whether any element of a vector is true.
def or ([Bool] -> Bool):
  false {(||)} foldl

// The ratio of a circle's circumference to its diameter.
def pi (Float): 3.141592653589793

// The product of a vector of floating-point numbers.
def productFloats ([Float] -> Float):
  1.0 {(*.)} foldl

// The product of a vector of integers.
def productInts ([Int] -> Int):
  1 {(*)} foldl

// The sum of a vector of floating-point numbers.
def sumFloats ([Float] -> Float):
  0.0 {(+.)} foldl

// The sum of a vector of integers.
def sumInts ([Int] -> Int):
  0 {(+)} foldl

// The ratio of a circle's circumference to its radius.
def tau (Float): 6.283185307179586

// Integer inequality.
infix 4 !=
def != (Int Int -> Bool):
  __ne_int

infix 4 ≠
def ≠ (Int Int -> Bool):
  __ne_int

// Floating-point inequality.
infix 4 !=.
def !=. (Float Float -> Bool):
  __ne_float

infix 4 ≠.
def ≠. (Float Float -> Bool):
  __ne_float

// Integer modulus.
infix_left 7 %
def % (Int Int -> Int):
  __mod_int

// Floating-point modulus.
infix_left 7 %.
def %. (Float Float -> Float):
  __mod_float

// Bitwise AND.
infix_left 7 &
def & (Int Int -> Int):
  __and_int

// Logical AND.
infix_right 3 &&
def && (Bool Bool -> Bool):
  __and_bool

infix_right 3 ∧
def ∧ (Bool Bool -> Bool):
  __and_bool

// Integer multiplication.
infix_left 7 *
def * (Int Int -> Int):
  __mul_int

infix_left 7 ×
def × (Int Int -> Int):
  __mul_int

// Floating-point multiplication.
infix_left 7 *.
def *. (Float Float -> Float):
  __mul_float

infix_left 7 ×.
def ×. (Float Float -> Float):
  __mul_float

// Integer addition.
infix_right 6 +
def + (Int Int -> Int):
  __add_int

// Floating-point addition.
infix_left 6 +.
def +. (Float Float -> Float):
  __add_float

// Integer increment.
postfix ++
def ++ (Int -> Int):
  (_ + 1)

// Floating-point increment.
postfix ++.
def ++. (Float -> Float):
  (_ +. 1.0)

// Integer subtraction.
infix_left 6 -
def - (Int Int -> Int):
  __sub_int

infix_left 6 −
def − (Int Int -> Int):
  __sub_int

// Floating-point subtraction.
infix_left 6 -.
def -. (Float Float -> Float):
  __sub_float

infix_left 6 −.
def −. (Float Float -> Float):
  __sub_float

// Integer decrement.
postfix --
def -- (Int -> Int):
  (_ - 1)

// Floating-point decrement.
postfix --.
def --. (Float -> Float):
  (_ -. 1.0)

// Integer division.
infix_left 7 /
def / (Int Int -> Int):
  __div_int

infix_left 7 ÷
def ÷ (Int Int -> Int):
  __div_int

// Floating-point division.
infix_left 7 /.
def /. (Float Float -> Float):
  __div_float

infix_left 7 ÷.
def ÷. (Float Float -> Float):
  __div_float

// Integer less than.
infix 4 <
def < (Int Int -> Bool):
  __lt_int

// Floating-point less than.
infix 4 <.
def <. (Float Float -> Bool):
  __lt_float

// Integer less than or equal.
infix 4 <=
def <= (Int Int -> Bool):
  __le_int

infix 4 ≤
def ≤ (Int Int -> Bool):
  __le_int

// Floating-point less than or equal.
infix 4 <=.
def <=. (Float Float -> Bool):
  __le_float

infix 4 ≤.
def ≤. (Float Float -> Bool):
  __le_float

// Integer equality.
infix 4 =
def = (Int Int -> Bool):
  __eq_int

// Floating-point equality.
infix 4 =.
def =. (Float Float -> Bool):
  __eq_float

// Integer greater than.
infix 4 >
def > (Int Int -> Bool):
  __gt_int

// Floating-point greater than.
infix 4 >.
def >. (Float Float -> Bool):
  __gt_float

// Integer greater than or equal.
infix 4 >=
def >= (Int Int -> Bool):
  __ge_int

infix 4 ≥
def ≥ (Int Int -> Bool):
  __ge_int

// Floating-point greater than or equal.
infix 4 >=.
def >=. (Float Float -> Bool):
  __ge_float

infix 4 ≥.
def ≥. (Float Float -> Bool):
  __ge_float

// Bitwise XOR.
infix_left 6 ^
def ^ (Int Int -> Int):
  __xor_int

// Boolean XOR.
infix_right 2 ^^
def ^^ (Bool Bool -> Bool):
  __xor_bool

infix_right 2 ⊻
def ⊻ (Bool Bool -> Bool):
  __xor_bool

// Bitwise OR.
infix_left 5 |
def | (Int Int -> Int):
  __or_int

// Logical OR.
infix_right 2 ||
def || (Bool Bool -> Bool):
  __or_bool

infix_right 2 ∨
def ∨ (Bool Bool -> Bool):
  __or_bool

// Bitwise NOT.
prefix ~
def ~ (Int -> Int):
  __not_int
