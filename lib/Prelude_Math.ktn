// Absolute value of an integer.
define absInt (int -> int):
  -> x;
  if (x < 0):
    x negInt
  else:
    x

// Absolute value of a floating-point number.
define absFloat (float -> float):
  -> x;
  if (x <. 0.0):
    x negFloat
  else:
    x

// Whether all elements of a vector satisfy a predicate.
define all<a> ([a] (a -> bool) -> bool):
  map and

// Whether all elements of a vector are true.
define and ([bool] -> bool):
  true \&& foldl

// Whether any element of a vector satisfies a predicate.
define any<a> ([a] (a -> bool) -> bool):
  map or

// Whether a floating-point number is even.
define evenFloat (float -> bool):
  -> x; x %. 2.0 =. 0.0

// Whether an integer is even.
define evenInt (int -> bool):
  -> x; x % 2 = 0

// The maximum of two integers.
define maxInt (int int -> int):
  -> a b;
  if (a > b) {a} else {b}

// The maximum of three integers.
define maxInt3 (int int int -> int):
  maxInt maxInt

// The maximum of a vector of integers.
define maxInts ([int] -> int?):
  \maxInt foldl1

// The minimum of two integers.
define minInt (int int -> int):
  -> a b;
  if (a < b) {a} else {b}

// The minimum of three integers.
define minInt3 (int int int -> int):
  minInt minInt

// The minimum of a vector of integers.
define minInts ([int] -> int?):
  \minInt foldl1

// Floating-point negation.
define negFloat (float -> float):
  kitten_intrinsic_negFloat

// Integer negation.
define negInt (int -> int):
  kitten_intrinsic_negInt

// Logical NOT.
define not (bool -> bool):
  kitten_intrinsic_notBool

// Whether a floating-point number is odd.
define oddFloat (float -> bool):
  evenFloat not

// Whether an integer is odd.
define oddInt (int -> bool):
  evenInt not

// Whether any element of a vector is true.
define or ([bool] -> bool):
  false \|| foldl

// The ratio of a circle's circumference to its diameter.
define pi (-> float): 3.141592653589793

// The product of a vector of floating-point numbers.
define productFloats ([float] -> float):
  1.0 \*. foldl

// The product of a vector of integers.
define productInts ([int] -> int):
  1 \* foldl

// The sum of a vector of floating-point numbers.
define sumFloats ([float] -> float):
  0.0 \+. foldl

// The sum of a vector of integers.
define sumInts ([int] -> int):
  0 \+ foldl

// The ratio of a circle's circumference to its radius.
define tau (-> float): 6.283185307179586

// Integer inequality.
infix 4 !=
define != (int int -> bool):
  kitten_intrinsic_neInt

infix 4 ≠
define ≠ (int int -> bool):
  kitten_intrinsic_neInt

// Floating-point inequality.
infix 4 !=.
define !=. (float float -> bool):
  kitten_intrinsic_neFloat

infix 4 ≠.
define ≠. (float float -> bool):
  kitten_intrinsic_neFloat

// Integer modulus.
infix left 7 %
define % (int int -> int):
  kitten_intrinsic_modInt

// Floating-point modulus.
infix left 7 %.
define %. (float float -> float):
  kitten_intrinsic_modFloat

// Bitwise AND.
infix left 7 &
define & (int int -> int):
  kitten_intrinsic_andInt

// Logical AND.
infix right 3 &&
define && (bool bool -> bool):
  kitten_intrinsic_andBool

infix right 3 ∧
define ∧ (bool bool -> bool):
  kitten_intrinsic_andBool

// Integer multiplication.
infix left 7 *
define * (int int -> int):
  kitten_intrinsic_mulInt

infix left 7 ×
define × (int int -> int):
  kitten_intrinsic_mulInt

// Floating-point multiplication.
infix left 7 *.
define *. (float float -> float):
  kitten_intrinsic_mulFloat

infix left 7 ×.
define ×. (float float -> float):
  kitten_intrinsic_mulFloat

// Integer addition.
infix right 6 +
define + (int int -> int):
  kitten_intrinsic_addInt

// Floating-point addition.
infix left 6 +.
define +. (float float -> float):
  kitten_intrinsic_addFloat

// Integer subtraction.
infix left 6 -
define - (int int -> int):
  kitten_intrinsic_subInt

infix left 6 −
define − (int int -> int):
  kitten_intrinsic_subInt

// Floating-point subtraction.
infix left 6 -.
define -. (float float -> float):
  kitten_intrinsic_subFloat

infix left 6 −.
define −. (float float -> float):
  kitten_intrinsic_subFloat

// Integer division.
infix left 7 /
define / (int int -> int):
  kitten_intrinsic_divInt

infix left 7 ÷
define ÷ (int int -> int):
  kitten_intrinsic_divInt

// Floating-point division.
infix left 7 /.
define /. (float float -> float):
  kitten_intrinsic_divFloat

infix left 7 ÷.
define ÷. (float float -> float):
  kitten_intrinsic_divFloat

// Integer less than.
infix 4 <
define < (int int -> bool):
  kitten_intrinsic_ltInt

// Floating-point less than.
infix 4 <.
define <. (float float -> bool):
  kitten_intrinsic_ltFloat

// Integer less than or equal.
infix 4 <=
define <= (int int -> bool):
  kitten_intrinsic_leInt

infix 4 ≤
define ≤ (int int -> bool):
  kitten_intrinsic_leInt

// Floating-point less than or equal.
infix 4 <=.
define <=. (float float -> bool):
  kitten_intrinsic_leFloat

infix 4 ≤.
define ≤. (float float -> bool):
  kitten_intrinsic_leFloat

// Integer equality.
infix 4 =
define = (int int -> bool):
  kitten_intrinsic_eqInt

// Floating-point equality.
infix 4 =.
define =. (float float -> bool):
  kitten_intrinsic_eqFloat

// Integer greater than.
infix 4 >
define > (int int -> bool):
  kitten_intrinsic_gtInt

// Floating-point greater than.
infix 4 >.
define >. (float float -> bool):
  kitten_intrinsic_gtFloat

// Integer greater than or equal.
infix 4 >=
define >= (int int -> bool):
  kitten_intrinsic_geInt

infix 4 ≥
define ≥ (int int -> bool):
  kitten_intrinsic_geInt

// Floating-point greater than or equal.
infix 4 >=.
define >=. (float float -> bool):
  kitten_intrinsic_geFloat

infix 4 ≥.
define ≥. (float float -> bool):
  kitten_intrinsic_geFloat

// Bitwise XOR.
infix left 6 ^
define ^ (int int -> int):
  kitten_intrinsic_xorInt

// Boolean XOR.
infix right 2 ^^
define ^^ (bool bool -> bool):
  kitten_intrinsic_xorBool

infix right 2 ⊻
define ⊻ (bool bool -> bool):
  kitten_intrinsic_xorBool

// Bitwise OR.
infix left 5 |
define | (int int -> int):
  kitten_intrinsic_orInt

// Logical OR.
infix right 2 ||
define || (bool bool -> bool):
  kitten_intrinsic_orBool

infix right 2 ∨
define ∨ (bool bool -> bool):
  kitten_intrinsic_orBool

// Bitwise NOT.
define ~ (int -> int):
  kitten_intrinsic_notInt
