// Binds computations on option values.
define bindOption<a, b> (a? (a -> b?) -> b?):
  \none option()else()

// Safely gets a value from an option value.
define fromOption<a> (a? a -> a):
  -> z;
  option {} else {z}

// Unsafely gets the value from an option.
define fromSome<a> (a? -> a):
  kitten::intrinsic::fromSome

// Whether an option is empty.
define isNone<a> (a? -> bool):
  option:
    drop false
  else:
    true

// Whether an option contains a value.
define isSome<a> (a? -> bool):
  option:
    drop true
  else:
    false

// Maps a function over an option value.
define liftOption<a, b> (a? (a -> b) -> b?):
  -> f;
  option:
    f apply some
  else:
    none

// Combines two option values with a function.
define liftOption2<a, b, c> (a? b? (a b -> c) -> c?):
  -> mx my f;
  none
  option (mx) -> x:
    option (my) -> y:
      drop x y f apply some

// Constructs an empty option.
define none<a> (-> a?):
  kitten::intrinsic::none

// Constructs an option with a value.
define some<a> (a -> a?):
  kitten::intrinsic::some

// TODO(strager): Find a better name.  'option' is taken.
define maybe<a, b> (a? (a -> b) b -> b):
  -> mx f z;
  option (mx):
    f apply
  else:
    z
