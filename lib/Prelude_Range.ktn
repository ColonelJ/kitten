// Range of integers from start to finish generating
// based on a given next and compare functions
def rangeFor (Int Int (Int -> Int) (Int Int -> Bool) -> [Int]):
  -> start end next cmp;
  \if start end cmp apply:
    []
  else:
    start next apply
      end next cmp rangeFor
    start prepend

// Inclusive range
def rangeTo (Int Int -> [Int]):
  -> start end;
  \if start < end:
    start end {(+ 1)} {(>)} rangeFor
  else:
    start end {(- 1)} {(<)} rangeFor

// Non-inclusive range
def rangeUntil (Int Int -> [Int]):
  -> start end;
  \if start < end:
    start end {(+ 1)} {(>=)} rangeFor
  else:
    start end {(- 1)} {(<=)} rangeFor

// Inclusive range (shorthand)
def .. (Int Int -> [Int]) { rangeTo }

// Non-inclusive range (shorthand)
def ... (Int Int -> [Int]) { rangeUntil }
