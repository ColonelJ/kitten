data Stream @ a:
  case EmptyStream;
  case StreamValue a (-> Stream@a);

// Operator alias for 'StreamValue'.
infix_right 5 +>
def +> @ a (a (-> Stream@a) -> Stream@a):
  StreamValue

// Concatenates two streams. If the first stream is infinite, the result
// is the first stream.
def catStreams @ a (Stream@a Stream@a -> Stream@a):
  -> xs ys;
  match (xs):
  case EmptyStream: ys
  case StreamValue -> x rest:
    x +>: rest apply ys catStreams

// Concatenates a stream of streams. If the first stream is infinite,
// the result is the first stream.
def concatStreams @ a (Stream@Stream@a -> Stream@a):
  match:
  case EmptyStream: EmptyStream
  case StreamValue -> streams:
    match:
    case EmptyStream: streams apply concatStreams
    case StreamValue -> value values:
      value +>: (values apply +> streams) concatStreams

// Keeps a stream of the first n elements of a stream, tossing the rest.
def keepStream @ a (Stream@a int -> Stream@a):
  -> n;
  if (n <= 0): drop EmptyStream
  else:
    match:
    case EmptyStream: EmptyStream
    case StreamValue -> x xs:
      x +>: xs apply (n - 1) keepStream

// Lifts a function on values to a function on streams.
def mapStream @ a b (Stream@a (a -> b) -> Stream@b):
  -> f;
  match:
  case EmptyStream: EmptyStream
  case StreamValue -> x xs:
    x f apply +>: xs apply f mapStream

// Repeats a stream infinitely.
def streamCycle @ a (Stream@a -> Stream@a):
  streamRepeat concatStreams

// Generates a stream counting up from a starting integer.
def streamFrom (int -> Stream@int):
  -> x; x +>: (x + 1) streamFrom

// Whether a stream is empty.
def streamIsEmpty @ a (Stream@a -> bool):
  match:
  case EmptyStream: true
  default: false

// Repeats a value infinitely.
def streamRepeat @ a (a -> Stream@a):
  -> x; x +>: x streamRepeat

// Converts a finite stream to a vector.
def streamToVector @ a (Stream@a -> [a]):
  match:
  case EmptyStream: []
  case StreamValue -> x xs:
    xs apply streamToVector
    x prepend

// Tosses the first n elements of a stream.
def tossStream @ a (Stream@a int -> Stream@a):
  -> n;
  if (n > 0):
    match:
    case EmptyStream: EmptyStream
    case StreamValue -> _ xs:
      xs apply (n - 1) tossStream

// Converts vector to a finite stream.
def vectorToStream @ a ([a] -> Stream@a):
  -> xs;
  option (xs head) -> x: x +>: xs tail vectorToStream
  else: EmptyStream
