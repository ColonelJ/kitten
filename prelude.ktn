-- Builtin

def +. (Float Float -> Float): __add_float
def + (Int Int -> Int): __add_int
def && (Bool Bool -> Bool): __and_bool
def & (Int Int -> Int): __and_int

-- FIXME Cannot express row types.
-- def apply (A (A -> B) -> B): __apply

def at ([a] Int -> a): __at
def bottom ([a] -> a): __bottom
def cat ([a] [a] -> [a]): __cat

-- FIXME Cannot express row types.
-- def compose ((A -> B) (B -> C) -> (A -> C)): __compose

def /. (Float Float -> Float): __div_float
def / (Int Int -> Int): __div_int
def down ([a] -> [a]): __down
def =. (Float Float -> Bool): __eq_float
def = (Int Int -> Bool): __eq_int
def empty ([a] -> Bool): __empty
def function (a -> (-> a)): __function
def >=. (Float Float -> Bool): __ge_float
def >= (Int Int -> Bool): __ge_int
def >. (Float Float -> Bool): __gt_float
def > (Int Int -> Bool): __gt_int
def <=. (Float Float -> Bool): __le_float
def <= (Int Int -> Bool): __le_int
def length ([a] -> Int): __length
def <. (Float Float -> Bool): __lt_float
def < (Int Int -> Bool): __lt_int
def %. (Float Float -> Float): __mod_float
def % (Int Int -> Int): __mod_int
def *. (Float Float -> Float): __mul_float
def * (Int Int -> Int): __mul_int
def !=. (Float Float -> Bool): __ne_float
def != (Int Int -> Bool): __ne_int
def negf (Float -> Float): __neg_float
def neg (Int -> Int): __neg_int
def ! (Bool -> Bool): __not_bool
def ~ (Int -> Int): __not_int
def || (Bool Bool -> Bool): __or_bool
def | (Int Int -> Int): __or_int
def print (Text ->): __print
def showi (Int -> Text): __show_int
def showf (Float -> Text): __show_float
def -. (Float Float -> Float): __sub_float
def - (Int Int -> Int): __sub_int
def top ([a] -> a): __top
def up ([a] -> [a]): __up
def vector (a -> [a]): __vector
def ^^ (Bool Bool -> Bool): __xor_bool
def ^ (Int Int -> Int): __xor_int

-- Core

def dec (Int -> Int): 1 -
def decf (Float -> Float): 1.0 -.

def drop (a ->):
  -> x

def dup (a -> a a):
  -> x
  x x

def id (a -> a) {}
def inc (Int -> Int): 1 +
def incf (Float -> Float): 1.0 +.

def swap (a b -> b a):
  -> a
  -> b
  a b

def showb (Bool -> Text): if: "true" else: "false"

-- Pushes a value to the top of a vector.
def push ([a] a -> [a]): vector cat

-- Prepends a value to the bottom of a vector.
def prepend (a [a] -> [a]):
  -> xs
  -> x
  x vector xs cat

-- Impure

-- Maps an impure function over each element of a vector.
def each ([a] (a ->) ->):
  -> f
  (a -> a){ dup f __apply } map drop

def newline (->): "\n" print
def printb (Bool ->): showb print
def printf (Float ->): showf print
def printi (Int ->): showi print

def printiv ([Int] ->):
  "[ " print
  (Int ->){ printi space } each
  "]" print

def printfv ([Float] ->):
  "[ " print
  (Float ->){ printf space } each
  "]" print

def say (Text ->): print newline
def sayb (Bool ->): printb newline
def sayf (Float ->): printf newline
def sayi (Int ->): printi newline
def sayfv ([Float] ->): printfv newline
def sayiv ([Int] ->): printiv newline
def space (->): " " print

-- Math and Logic

def and ([Bool] -> Bool): true `&& fold_up
def even (Int -> Bool): 2 % 0 =
def evenf (Float -> Bool): 2.0 %. 0.0 =.
def odd (Int -> Bool): even !
def oddf (Float -> Bool): evenf !
def or ([Bool] -> Bool): false `|| fold_up
def product ([Int] -> Int): 1 `* fold_up
def productf ([Float] -> Float): 1.0 `*. fold_up
def sum ([Int] -> Int): 0 `+ fold_up
def sumf ([Float] -> Float): 0.0 `+. fold_up

-- Iterates a function on a value until a predicate holds.
def until (a (a -> a) (a -> Bool) -> a):
  -> p  -- Predicate
  -> f  -- Function
  -> x  -- Initial value
  if x p __apply:
    x
  else:
    x f __apply
    f p until

-- Vector

-- Folds elements of a vector bottom-up (right-associatively).
def fold_up ([a] b (a b -> b) -> b):
  -> f   -- Function
  -> z   -- Starting value
  -> xs  -- Vector
  if xs empty:
    z
  else:
    xs up z f fold_up
    xs bottom
    f __apply

-- Filters a vector by a predicate.
def filter ([a] (a -> Bool) -> [a]):
  -> p   -- Predicate
  -> xs  -- Vector
  if xs empty:
    xs
  else if xs bottom p __apply:
    xs bottom vector
    xs up p filter
    cat
  else:
    xs up p filter

-- Keeps the topmost n elements of a vector, tossing the rest.
def keep ([a] Int -> [a]):
  -> n   -- Number of elements
  -> xs  -- Vector
  if n 0 <=  xs empty  || :
    (a)[]
  else:
    xs down  n dec  keep
    xs top push

-- Maps a function over the elements of a vector.
def map ([a] (a -> b) -> [b]):
  -> f   -- Function
  -> xs  -- Vector
  if xs empty:
    xs
  else:
    xs bottom f __apply
    xs up f map
    prepend

-- Splits a vector at the given index.
def split_at ([a] Int -> [a] [a]):
  -> n   -- Number of elements
  -> xs  -- Vector
  xs n toss
  xs n keep

-- Tosses the first n elements of a vector, keeping the rest.
def toss ([a] Int -> [a]):
  -> n   -- Number of elements
  -> xs  -- Vector
  if n 0 <=  xs empty  || :
    xs
  else:
    xs down  n dec  toss
