def levenshtein ([Char] [Char] -> Int):
  -> first second;
  first length -> rows;
  second length -> columns;

  // A matrix such that the value at row i, column j is the
  // Levenshtein distance between the first i characters of
  // the first string and the first j characters of the
  // second string.
  0 columns++ replicate rows++ replicate

  // Distance from any first string to empty second string.
  \mapRange 0 rows: -> row;
    (row, 0) @@= row

  // Distance from any second string to empty first string.
  \mapRange 0 columns: -> column;
    (0, column) @@= column

  \mapRange 1 rows: -> row;
    \mapRange 1 columns: -> distances column;

      first @! row-- -> firstChar;
      second @! column-- -> secondChar;

      distances
      \if firstChar secondChar eqChar:
        distances @@! (row--, column--)
      else:
        distances @@! (row--, column);    // deletion
        distances @@! (row,   column--);  // insertion
        distances @@! (row--, column--);  // substitution
        minInt3 ++
      ((row, column) @@= _)

  (_ @@! (rows, columns))
 
"kitten" "sitting" levenshtein sayInt
"rosettacode" "raisethysword" levenshtein sayInt
