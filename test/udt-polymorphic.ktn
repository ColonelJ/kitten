data Option<a>:
  case Some (a)
  case None

match (1 Option_Some):
  case Option_Some: sayInt
  case Option_None: "None" say

define eqOption<a> (Option@a Option@a (a a -> bool) -> bool):
  -> eq;
  match:
  case Option_Some:
    swap match:
    case Option_Some: eq apply
    default: drop false
  case Option_None:
    match:
    case Option_None: true
    default: false

(1 Option_Some) (1 Option_Some) \= eqOption sayBool
(1 Option_Some) (2 Option_Some) \= eqOption sayBool
(1 Option_Some) Option_None \= eqOption sayBool
Option_None Option_None \= eqOption sayBool
