data Option<a>:
  case Some (a)
  case None

match (1 Option::Some):
  case Option::Some: sayInt
  case Option::None: "None" say

define eqOption<a> (Option@a Option@a (a a -> bool) -> bool):
  -> eq;
  match:
  case Option::Some:
    swap match:
    case Option::Some: eq apply
    default: drop false
  case Option::None:
    match:
    case Option::None: true
    default: false

(1 Option::Some) (1 Option::Some) \= eqOption sayBool
(1 Option::Some) (2 Option::Some) \= eqOption sayBool
(1 Option::Some) Option::None \= eqOption sayBool
Option::None Option::None \= eqOption sayBool
