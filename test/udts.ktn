data Void {}

data Unit: case Unit

data Option {
  case None ()
  case Some (int)
}

data Either {
  case Left (int)
  case Right ([char])
}

data These:
  case This (int)
  case That (char)
  case These (int, char)

Unit::Unit match:
  case Unit::Unit:
    "Unit" say

1 Either::Left LR
"foo" Either::Right LR

define LR (Either ->):
  match:
    case Either::Left: drop "Left" say
    case Either::Right: drop "Right" say

1 Option::Some
1 'x' These::These
